import errnoimport gcimport socketfrom CONFIG import *from packet_creator import *from utils import *HELLO_PACKET = '21310020ffffffffffffffffffffffffffffffffffffffffffffffffffffffff'GET_POWER_STATUS_DATA = 'd9bf76d83d66e70fae7a06d53f59b9a38c733add0b26b72b6615026fff9da1abc1d2d783b00e5595b89c5f8063facb74'POWER_OFF_DATA = '65d06646727279dfe2abbc2744b928dcb4030cded12f2a08f708ff7dc0cc8b6f623c72ebd1e1bd7f6d07844a1c48b71a'POWER_ON_DATA = '65d06646727279dfe2abbc2744b928dcb4030cded12f2a08f708ff7dc0cc8b6f2a2049c67dadea6e86d117c6bb823c5b'POWER_OFF_RES = b'97c9bbe7c213c9993a6430ed71f2d9229db5c8e11d59e4293700b9c1afb8fdd6'POWER_ON_RES = b'bbdff6d70957c92fb21a34b33f0855f042e5076dfcf9f0554e54eeb487421c79'OK_RES = b'0e5ff5a8366fc5e23ae5ab53a5cd81c31999c23ce0e7edb61d8e437540bb0a76'sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)sock.bind(("", 12345))sock.settimeout(0.5)def send_and_recv_packet():    gc.collect()    try:        sock.sendto(hex_to_byte(HELLO_PACKET), ('192.168.0.255', 54321))        data, addr = sock.recvfrom(100)    except Exception as exc:        print('Unable to Send and Receive Hello Packet ... ')        print(errno.errorcode[exc.errno])        return b'', b''    if data != b'':        data = byte_to_hex(data)        return data, addr    return b'', b''def get_status():    data, addr = send_and_recv_packet()    if data == b'' or addr == b'':        return None    gc.collect()    packet = create_packet(data, GET_POWER_STATUS_DATA, DEVICE_TOKEN)    gc.collect()    try:        sock.sendto(packet, addr)        data, addr = sock.recvfrom(100)    except Exception as exc:        print('Unable to Send and Receive Packet ... ')        print(errno.errorcode[exc.errno])        return None    if data != b'':        data = byte_to_hex(data)[64:]        if (data == POWER_ON_RES):            return True        elif (data == POWER_OFF_RES):            return False    print(data)    return Nonedef set_power(value=False):    data, addr = send_and_recv_packet()    if data == b'' or addr == b'':        return None    PACKET_DATA = POWER_OFF_DATA    if value:        PACKET_DATA = POWER_ON_DATA    gc.collect()    packet = create_packet(data, PACKET_DATA, DEVICE_TOKEN)    gc.collect()    try:        sock.sendto(packet, addr)        data, addr = sock.recvfrom(100)    except Exception as exc:        print('Unable to Send and Receive Packet ... ')        print(errno.errorcode[exc.errno])        return None    if data is not None:        data = byte_to_hex(data)[64:]        if data == OK_RES:            return True    print(data)    return None